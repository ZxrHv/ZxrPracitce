滑动窗口1493
给你一个二进制数组 nums ，你需要从中删掉一个元素。
请你在删掉元素的结果数组中，返回最长的且只包含 1 的非空子数组的长度。
如果不存在这样的子数组，请返回 0 。

提示 1：
输入：nums = [1,1,0,1]
输出：3
解释：删掉位置 2 的数后，[1,1,1] 包含 3 个 1 。
示例 2：
输入：nums = [0,1,1,1,0,1,1,0,1]
输出：5
解释：删掉位置 4 的数字后，[0,1,1,1,1,1,0,1] 的最长全 1 子数组为 [1,1,1,1,1] 。
示例 3：
输入：nums = [1,1,1]
输出：2
解释：你必须要删除一个元素。
class Solution {
public:
    int longestSubarray(vector<int>& nums) 
    {
        //删掉一个元素，使得连续1的长度最长
        int n = nums.size();
        int res = 0;
        int count = 0;
        for(int i = 0,j=0;i!=n;++i)
        {
            if(nums[i] == 0)
            {
                count++;
            }
            while(count > 1)
            {
                if(nums[j++] == 0)
                {
                    count--;
                }
            }
            res = max(res,i-j);
        }
        return res;
    }
};
